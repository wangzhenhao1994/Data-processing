%------------------------------------------------------------------------------------
% Plot expectation values: sum of energies versus time
%------------------------------------------------------------------------------------

% This file is part of the WavePacket program package for quantum-mechanical
% simulations, and subject to the GNU General Public license v. 2 or later.
%
% Copyright (C) 2004-2017 Burkhard Schmidt's group
%               2007-2009 Ulf Lorenz
%
% see the README file for license details.

function energies (obj)
global expect hamilt info time

%% Plot energies for total wavefunction (black curves)

% Total energy
h1 = plot ( time.steps.m_grid(obj.mask_tot), expect.total(obj.mask_tot));
set(h1, ...
    'LineStyle',   obj.patterns{1}, ...
    'Color',       'black', ...
    'LineWidth',   obj.l_thick, ...
    'DisplayName', '<E>')
hold on

% Potential energy
if hamilt.coupling.n_eqs==1
    if obj.errorbar
        h2 = errorbar ( time.steps.m_grid(obj.mask_tot), ...
            expect.pot.tot   (obj.mask_tot), ...
            expect.pot.unc{1}(obj.mask_tot) );
        set(h2, ...
            'LineStyle',   obj.patterns{2}, ...
            'Color',       'black', ...
            'LineWidth',   obj.l_thick, ...
            'DisplayName', '<V>')
    else
        h2 = plot ( time.steps.m_grid(obj.mask_tot), ...
            expect.pot.tot   (obj.mask_tot) );
        set(h2, ...
            'LineStyle',   obj.patterns{2}, ...
            'Color',       'black', ...
            'LineWidth',   obj.l_thick, ...
            'DisplayName', '<V>')
    end
else
    h2 = plot ( time.steps.m_grid(obj.mask_tot), ...
        expect.pot.tot(obj.mask_tot) );
    set(h2, ...
        'LineStyle',   obj.patterns{2}, ...
        'Color',       'black', ...
        'LineWidth',   obj.l_thick, ...
        'DisplayName', '<V>')
end

% Kinetic energy
if hamilt.coupling.n_eqs==1
    if obj.errorbar
        h3 = errorbar ( time.steps.m_grid(obj.mask_tot), ...
            expect.kin.tot   (obj.mask_tot), ...
            expect.kin.unc{1}(obj.mask_tot) );
        set(h3, ...
            'LineStyle',   obj.patterns{3}, ...
            'Color',       'black', ...
            'LineWidth',   obj.l_thick, ...
            'DisplayName', '<T>')
    else
        h3 = plot ( time.steps.m_grid(obj.mask_tot), ...
            expect.kin.tot   (obj.mask_tot) );
        set(h3, ...
            'LineStyle',   obj.patterns{3}, ...
            'Color',       'black', ...
            'LineWidth',   obj.l_thick, ...
            'DisplayName', '<T>')
    end
else
    h3 = plot ( time.steps.m_grid(obj.mask_tot), ...
        expect.kin.tot(obj.mask_tot) );
    set(h3, ...
        'LineStyle',   obj.patterns{3}, ...
        'Color',       'black', ...
        'LineWidth',   obj.l_thick, ...
        'DisplayName', '<T>')
end

%% Plot all/potential/kinetic energies for individual wavefunctions (colored curves)
if hamilt.coupling.n_eqs>1
    for m=1:hamilt.coupling.n_eqs
        
        if strcmpi (hamilt.coupling.represent,'dia')
            my_label = hamilt.coupling.labels{m};
        elseif strcmpi (hamilt.coupling.represent,'adi')
            my_label = ['adi-' int2str(m)];
        end
        
        
        % If populations exceed threshold, at least for some time steps
        if ~isempty (obj.mask_cha{m})
            
            % Total energy
            h = plot ( time.steps.m_grid   (obj.mask_cha{m}), ...
                expect.pot.cha{m}(obj.mask_cha{m})+ ...
                expect.kin.cha{m}(obj.mask_cha{m}) );
            set(h, ...
                'LineStyle',   obj.patterns{1}, ...
                'Color',       obj.colors(m,:), ...
                'LineWidth',   obj.l_thick)
            
            % Potential, kinetic energy
            if obj.errorbar
                h = errorbar ( time.steps.m_grid   (obj.mask_cha{m}), ...
                    expect.pot.cha{m}(obj.mask_cha{m}), ...
                    expect.pot.unc{m}(obj.mask_cha{m}) );
                set(h, ...
                    'LineStyle',   obj.patterns{2}, ...
                    'Color',       obj.colors(m,:), ...
                    'LineWidth',   obj.l_thick)

                h = errorbar ( time.steps.m_grid   (obj.mask_cha{m}), ...
                    expect.kin.cha{m}(obj.mask_cha{m}), ...
                    expect.kin.unc{m}(obj.mask_cha{m}) );
                set(h, ...
                    'LineStyle',   obj.patterns{3}, ...
                    'Color',       obj.colors(m,:), ...
                    'LineWidth',   obj.l_thick)
            else
                h = plot ( time.steps.m_grid   (obj.mask_cha{m}), ...
                    expect.pot.cha{m}(obj.mask_cha{m}) );
                set(h, ...
                    'LineStyle',   obj.patterns{2}, ...
                    'Color',       obj.colors(m,:), ...
                    'LineWidth',   obj.l_thick)

                h = plot ( time.steps.m_grid   (obj.mask_cha{m}), ...
                    expect.kin.cha{m}(obj.mask_cha{m}) );
                set(h, ...
                    'LineStyle',   obj.patterns{3}, ...
                    'Color',       obj.colors(m,:), ...
                    'LineWidth',   obj.l_thick)
            end
        end
    end
end

%% Axes, labels, etc
if ~isempty(obj.e_min)
    e_min = obj.e_min;
elseif isfield (hamilt,'pot_min')
    e_min = hamilt.pot_min;
else
    e_min = -inf;
end

if ~isempty(obj.e_max)
    e_max = obj.e_max;
elseif isfield (hamilt,'pot_max') && isfield (hamilt,'kin_max')
    e_max = hamilt.pot_max + hamilt.kin_max;
else
    e_max = +inf;
end

axis ( [ 0 time.steps.t_total e_min e_max ] )

% Legend explaining the line styles
if obj.legends
    legend([h1 h2 h3],'Location','SouthEast') 
end

% Fonts
set(gca, ...
	'LineWidth',  obj.l_thick, ...
	'FontName',   obj.f_name, ...
	'FontSize',   obj.f_large, ...
	'FontWeight', obj.f_heavy)

if isfield(time,'pulse') ||  ~isempty(time.steps.acf)
    %  Suppress tick labels
    if strcmpi(info.system,'Matlab')
        set(gca, 'XTickLabels', [])
    elseif strcmpi(info.system,'Octave')
        set(gca, 'XTickLabel', [])
    end

else
    switch lower (info.program)
        case {'qm_propa'} % Time dependent simulations
            xlabel ('t')
        case{'qm_bound'} % Time independent: Loop over eigenstates
            xlabel ('n')
        otherwise
            prt.error ('Wrong choice of program')
    end
end

if hamilt.coupling.n_eqs==1
    ylabel ( '<V,T,E>' )
else
    if strcmpi (hamilt.coupling.represent,'adi')
        ylabel ( '<V>, <T>, <E>_{adi}' )
    elseif strcmpi (hamilt.coupling.represent,'dia')
        ylabel ( '<V>, <T>, <E>_{dia}' )
    end
end
hold off

end
